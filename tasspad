#!/usr/bin/env python3
'''
Tasspad is a simple notepad/reminder app with a few flexible options
So you can turn your notes into nags, or executable commands, or tag them
Designed to sit in a system tray / notification area
'''
#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
# Copyright (C) 2017 Brianna Rainey
#
# Tasspad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program, in a file named "COPYING".  If not, see
# <http://www.gnu.org/licenses/>
#
#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk, AppIndicator3, GObject
import signal
import datetime
import configparser
import os
import random
from textwrap import wrap
from subprocess import call
from string import ascii_letters

#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
# Globals
#
#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
def makeConfigPath():
    ''' construct path to conf files for ConfigParser '''
    ConfigPath = os.path.join(os.getenv("HOME"), '.config', 'tasspad')
    if not os.path.exists(ConfigPath):
        if not os.path.exists(os.path.join(os.getenv("HOME"), '.config')):
            os.mkdir(os.path.join(os.getenv("HOME"), '.config'))
        os.mkdir(ConfigPath)
    return ConfigPath

def makeSrcPath():
    ''' construct path for resources (e.g., icons) '''
    filedir = os.path.dirname(os.path.realpath(__file__))
    filename = os.path.basename(os.path.realpath(__file__))
    SrcPath = os.path.join(filedir, '%s-src' % filename)
    if not os.path.exists(SrcPath):
        os.mkdir(SrcPath)
    return SrcPath

ConfigPath = makeConfigPath()
SrcPath = makeSrcPath()

#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
# Classes
#
#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
class _ConfigParser(configparser.ConfigParser):
    def __init__(self, path, defaults):
        super().__init__()
        if not os.path.exists(path):
            # make a new default file
            _ = configparser.ConfigParser()
            for key, value in defaults.items():
                _[key] = value
            with open(path, 'w') as f:
                _.write(f)
            del _
        self.read(path)

class ConfParser(_ConfigParser):
    defaults =  {
                'general' : {
                            'appname'   : 'Tasspad',
                            'icon'      : '%s/icon.svg' % SrcPath,
                            'theme'     : 'default',
                            'menuwidth' : '29',
                            'usegroups' : 'false',
                            },
                }

    def __init__(self, path=os.path.join(ConfigPath, 'conf.conf')):
        ConfParser.path = path
        super().__init__(ConfParser.path, ConfParser.defaults)

class NotesParser(_ConfigParser):
    defaults =  {
                'DEFAULT' : {
                            'title' : '',
                            'body' : '',
                            'timecreated' : '',
                            'timemodified' : '',
                            'group' : 'main',
                            'tags' : '',
                            'execute' : 'false',
                            },
                'apricot' : {
                            'title' : 'Welcome!',
                            },
                }

    def __init__(self, path=os.path.join(ConfigPath, 'notes.conf')):
        NotesParser.path = path
        super().__init__(NotesParser.path, NotesParser.defaults)

    def save(self):
        with open(NotesParser.path, 'w') as f:
            self.write(f)
        Tray.createMenu()

    def uniqueName(self):
        while True:
            pname = "".join([random.choice(ascii_letters) for i in range(20)])
            if pname not in self.sections():
                self.add_section(pname)
                break
        return pname

    def new(self):
        window = NewNoteWindow()
        ch = window.run()
        if ch == Gtk.ResponseType.APPLY:
            newname = self.uniqueName()
            self[newname]['title'] = window.entry.get_text()
            self[newname]['timecreated'] = currentTime()
            self.save()
        window.destroy()

    def edit(self, notename):
        window = EditWindow(notename)
        while True:
            ch = window.run()
            if ch == Gtk.ResponseType.APPLY:
                for key, value in self[notename].items():
                    if key.startswith('time'):
                        continue
                    entrytext = window.fields[key].get_text()
                    if entrytext != self[notename][key]:
                        self[notename][key] = entrytext
                self[notename]['timemodified'] = currentTime()
                self.save()
                break
            elif ch == Gtk.ResponseType.CANCEL:
                break
        window.destroy()

    def delete(self, notename):
        self.remove_section(notename)
        self.save()

class NewNoteWindow(Gtk.Dialog):
    def __init__(self):
        super().__init__(title=Config['general']['appname'])
        self.set_icon_from_file(Config['general']['icon'])

        # construct content area
        self.entry = Gtk.Entry()
        self.entry.set_activates_default(True)
        self.bodyBox = self.get_content_area()
        self.bodyBox.pack_start(Gtk.Label("New note: "), False, False, 0)
        self.bodyBox.pack_start(self.entry, False, False, 0)
        # construct action area
        addButton = self.add_button(Gtk.STOCK_ADD, Gtk.ResponseType.APPLY)
        self.add_button(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
        # make addButton default button
        addButton.set_can_default(True)
        self.set_default(addButton)
        self.show_all()

class EditWindow(Gtk.Dialog):
    def __init__(self, notename):
        super().__init__(title=Config['general']['appname'])
        self.set_icon_from_file(Config['general']['icon'])
        box = self.get_content_area()
        box.set_orientation(Gtk.Orientation.VERTICAL)
        self.fields = {}
        for key, value in Notes[notename].items():
            field = Gtk.Box()
            field.add(Gtk.Label(key))
            if key.startswith('time'):
                label = Gtk.Label(value)
                field.pack_end(label, False, False, 0)
            else:
                entry = Gtk.Entry()
                entry.set_text(value)
                field.pack_end(entry, False, False, 0)
                self.fields[key] = entry
            box.pack_start(field, False, False, 0)
        self.add_buttons(Gtk.STOCK_APPLY, Gtk.ResponseType.APPLY,
                         Gtk.STOCK_CLOSE, Gtk.ResponseType.CANCEL
                        )
        self.show_all()

class TrayIcon:
    def __init__(self):
        self.indicator = AppIndicator3.Indicator.new(
            Config['general']['appname'], Config['general']['icon'],
            AppIndicator3.IndicatorCategory.OTHER)
        self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        self.createMenu()

    def createMenu(self):
        self.indicator.set_menu(self.buildMenu())

    def buildMenu(self):
        menu = Gtk.Menu()
        newNoteItem = Gtk.MenuItem('[New Note]')
        newNoteItem.connect('activate', lambda _: Notes.new())
        menu.append(newNoteItem)
        if Config.getboolean('general','usegroups'):
            newGroupItem = Gtk.MenuItem('[New Group]')
            newGroupItem.connect('activate', lambda _: Notes.new())
            menu.append(newGroupItem)
        self.noteItems = []
        # notes
        for noteName in Notes.sections():
            def leftClickAction(noteName):
                if Notes.getboolean(noteName, 'execute'):
                    call('(%s &)' % Notes[noteName]['title'], shell=True)
                else:
                    Notes.delete(noteName)
            if noteName == 'DEFAULT':
                continue
            # make a primary menu item for this note...
            titlelines = wrap(Notes[noteName]['title'],
                              int(Config['general']['menuwidth']))
            item = Gtk.MenuItem("\n".join(line for line in titlelines))
            self.noteItems.insert(0, item)

            if Notes[noteName]['body']:
                # make a submenu for the note's body...
                submenu = Gtk.Menu()
                removeButton = Gtk.MenuItem('Remove')
                editButton = Gtk.MenuItem('Edit')
                removeButton.connect(
                    'activate',
                    lambda _, section: leftClickAction(section),
                    noteName
                )
                editButton.connect(
                    'activate',
                    lambda _, section: Notes.edit(section),
                    noteName
                )

                lines = wrap(Notes[noteName]['body'],
                             int(Config['general']['menuwidth']))
                for line in lines:
                    submenu.append(Gtk.MenuItem(line))
                sep = Gtk.SeparatorMenuItem()
                submenu.append(sep)
                submenu.append(removeButton)
                submenu.append(editButton)
                self.noteItems[0].set_submenu(submenu)
            else:
                # hide submenu, bind left and right click to edit and delete
                self.noteItems[0].connect(
                    'button-press-event',
                    lambda _, k, section: \
                        leftClickAction(section) if k.button == 1 \
                        else Notes.edit(section),
                    noteName
                )
            # add mainmenu item to mainmenu
            menu.append(self.noteItems[0])
        # end of menu
        menuSep = Gtk.SeparatorMenuItem()
        menu.append(menuSep)
        prefsItem = Gtk.MenuItem('Preferences')
        prefsItem.connect('activate', lambda _: self.setPrefs())
        menu.append(prefsItem)
        quitItem = Gtk.MenuItem('Quit')
        quitItem.connect('activate', lambda _: self.stop())
        menu.append(quitItem)
        menu.show_all()
        return menu

    def setPrefs(self):
        pass

    def stop(self):
        Gtk.main_quit()


#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
# Functions
#
#=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~==~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~#
def currentTime():
    current_time = datetime.datetime.now()
    return (
            "%s-%s-%s %s:%s" % (current_time.year,
                                current_time.month,
                                current_time.day,
                                current_time.hour,
                                current_time.minute)
            )

# Main
def main():
    # start GTK loop
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Gtk.main()

if __name__ == "__main__":
    Config = ConfParser()
    Notes = NotesParser()
    Tray = TrayIcon()
    main()
